{"/_app":{"title":" App","data":{"":""}},"/bridge":{"title":"Bridge","data":{"":"","currently-supported#Currently Supported":"ESX\tQBCore\tQBox\tvRP\tNDCore\tDatabase\t\t\t\t\t\toxmysql\t\t\tInventory\t\t\t\t\t\tqb-inventory\t\t\tlj-inventory\t\t\taj-inventory\t\t\tax-inventory\t\t\tps-inventory\t\t\tox-inventory\t\t\tqs-inventory\t\t\tTarget\t\t\t\t\t\tox_target\t\t\tqb-target\t\t\tqtarget\t\t\tZone\t\t\t\t\t\tox_lib\t\t\tPolyZone","bridge-settings-optional#Bridge Settings (Optional)":"The bridge auto detects all components incase you use a renamed database/framework/inventory/target/zone you can change the names using the following convars\n-- Turn On Debug Mode\nsetr bridge:debug \"true\"\n\n-- Override Database\nsetr bridge:database \"oxmysql\"\n\n-- Override Database Resource Name (Used For Export)\nsetr bridge:databasename \"oxmysql\"\n\n-- Override Framework\nsetr bridge:framework \"esx\"\n\n-- Override Framework Resource Name (Used For Export)\nsetr bridge:frameworkname \"es_extended\"\n\n-- Override Framework Resource Name (Used For Event)\nsetr bridge:frameworkevent \"esx:getSharedObject\"\n\n-- Override Inventory\nsetr bridge:inventory \"ox_inventory\"\n\n-- Override Inventory Resource Name (Used For Export)\nsetr bridge:inventoryname \"ox_inventory\"\n\n-- Override Target\nsetr bridge:target \"ox_target\"\n\n-- Override Target Name (Used For Export)\nsetr bridge:targetname \"ox_target\"\n\n-- Override Zone\nsetr bridge:zone \"ox_lib\"\n\n-- Override Zone Name (Used For Export)\nsetr bridge:zonename \"ox_lib\""}},"/bridge/database/insert":{"title":"Insert","data":{"":"Insert new row into table\nDatabase.insert(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal id = Database.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' })\n\nprint(id)\n\n\n\nDatabase.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' }, function(id)\nprint(id)\nend)"}},"/bridge/database/prepare":{"title":"Prepare","data":{"":"Prepare query for optimizing performance and frequently called queries\nDatabase.prepare(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/query":{"title":"Query","data":{"":"Returns all\nDatabase.query(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal result = Database.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/scalar":{"title":"Scalar","data":{"":"Returns the first column for a single row\nDatabase.scalar(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal column1 = Database.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(column1)\n\n\n\nDatabase.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(columm1)\nprint(column1)\nend)"}},"/bridge/database/single":{"title":"Single","data":{"":"Returns all selected columns for a single row\nDatabase.single(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(result.column1, result.column2)\n\n\n\nDatabase.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(result)\nprint(result.column1, result.column2)\nend)"}},"/bridge/database/transaction":{"title":"Transaction","data":{"":"Transaction executes multiple queries and commits them only if all succeed\nDatabase.transaction(query, data, cb)\n\nquery: table\ncb?: function(result)\n\nreturns: boolean\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nlocal result = Database.transaction(queries)\n\nprint(result)\n\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nDatabase.transaction(queries, function(result)\nprint(result)\nend)"}},"/bridge/database/update":{"title":"Update","data":{"":"Returns the number of rows affected by the query\nDatabase.update(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal result = Database.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' })\n\nprint(result)\n\n\n\nDatabase.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' }, function(result)\nprint(result)\nend)"}},"/bridge/framework/client":{"title":"Framework Client","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n-- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n-- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n-- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n-- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n-- Player Gang Changed\nend","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function()\n-- Player Data Changed\nend","player#Player":"Framework.Player\nreturns: Player\nlocal player = Framework.Player\nprint(player.Firstname, player.Lastname)","createcallback#CreateCallback":"Function Creates Client Callback.\nFramework.CreateCallback(name, cb)\n\nname: string\ncb: function(cb, ...)\n\n\nFramework.CreateCallback('clientcallbackname', function(cb, value1, value2)\ncb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Server Callback\nFramework.TriggerCallback(name, cb, ...)\n\nname: string\ncb: function(...)\n\n\nFramework.TriggerCallback('servercallbackname', function(result1, result2)\nprint(result1, result2)\nend, value1, value2)","spawnvehicle#SpawnVehicle":"Function Spawns Vehicle\nFramework.SpawnVehicle(cb, model, coords, warp)\n\ncb: function(netid)\nmodel number | string\ncoords? vector3 | vector4\nwarp? boolean\n\n\nFramework.SpawnVehicle(function(netid)\nlocal vehicle = NetToVeh(netid)\nSetVehicleNumberPlateText(vehicle, 'MYPLATE')\nend, 'dominator')","toggleduty#ToggleDuty":"Toggle Job Duty\nFramework.ToggleDuty()","notify#Notify":"Show Notification Message\nFramework.Notify(message, type, length)\n\nmessage: string\ntype info | success | error\nlength number\n\n\nFramework.Notify('My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead()\nreturns: boolean"}},"/bridge/framework/player":{"title":"Framework Player","data":{"":"","source#source":"Player sourcereturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nprint(player.source)","identifier#Identifier":"Player identifierreturns: string\n\n\nFramework.Player.Identifier\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Identifier","name#Name":"Player namereturns: string\n\n\nFramework.Player.Name\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Name","firstname#Firstname":"Player firstnamereturns: string\n\n\nFramework.Player.Firstname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Firstname","lastname#Lastname":"Player lastnamereturns: string\n\n\nFramework.Player.Lastname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Lastname","job#Job":"Player jobreturns: table\nName: string\nLabel: string\nDuty: boolean\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nFramework.Player.Job.Name\n-- returns: police\n\nFramework.Player.Job.Label\n-- returns: Law Enforcement\n\nFramework.Player.Job.Duty\n-- returns: false\n\nFramework.Player.Job.Boss\n-- returns: false\n\nFramework.Player.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nFramework.Player.Job.Grade.Name\n-- returns: Officer\n\nFramework.Player.Job.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nplayer.Job.Name\n-- returns: police\n\nplayer.Job.Label\n-- returns: Law Enforcement\n\nplayer.Job.Duty\n-- returns: false\n\nplayer.Job.Boss\n-- returns: false\n\nplayer.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nplayer.Job.Grade.Name\n-- returns: Officer\n\nplayer.Job.Grade.Level\n-- returns: 1","gang#Gang":"Player gangreturns: table\nName: string\nLabel: string\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nFramework.Player.Gang.Name\n-- returns: mygang\n\nFramework.Player.Gang.Label\n-- returns: My Gang Name\n\nFramework.Player.Gang.Boss\n-- returns: false\n\nFramework.Player.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nFramework.Player.Gang.Grade.Name\n-- returns: Enforcer\n\nFramework.Player.Gang.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nplayer.Gang.Name\n-- returns: mygang\n\nplayer.Gang.Label\n-- returns: My Gang Name\n\nplayer.Gang.Boss\n-- returns: false\n\nplayer.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nplayer.Gang.Grade.Name\n-- returns: Enforcer\n\nplayer.Gang.Grade.Level\n-- returns: 1","set-job#Set Job":"Set Player job\nPlayer.SetJob(job, grade)\n\njob: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetJob('police', 0)","set-gang#Set Gang":"Set Player gang\nPlayer.SetGang(gang, grade)\n\ngang: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetGang('mygang', 0)","hasjob#HasJob":"Check if player has job and or grade\nFramework.HasJob(job, player)\n\njob: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasJob('police', Framework.Player)\n\nFramework.HasJob({ ['police'] = 1 }, Framework.Player)","hasgang#HasGang":"Check if player has gang and or grade\nFramework.HasGang(gang, player)\n\ngang: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasGang('mygang', Framework.Player)\n\nFramework.HasGang({ ['mygang'] = 1 }, Framework.Player)","add-money#Add Money":"Add Player Money\nPlayer.AddMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.AddMoney('cash', 100)","remove-money#Remove Money":"Remove Player Money\nPlayer.RemoveMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveMoney('cash', 100)","get-money#Get Money":"Get Player Money\nPlayer.GetMoney(type)\n\ntype: cash | bank | other\n\nreturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.GetMoney('cash')"}},"/bridge/framework/server":{"title":"Framework Server","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n-- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n-- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n-- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n-- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n-- Player Gang Changed\nend","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function()\n-- Player Data Changed\nend","createcallback#CreateCallback":"Function Creates Server Callback.\nFramework.CreateCallback(name, cb)\n\nname: string\ncb: function(source cb, ...)\n\n\nFramework.CreateCallback('servercallbackname', function(source, cb, value1, value2)\ncb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Client Callback\nFramework.TriggerCallback(source, name, cb, ...)\n\nsource: number\nname: string\ncb: function(...)\n\n\nFramework.TriggerCallback(source, 'clientcallbackname', function(result1, result2)\nprint(result1, result2)\nend, value1, value2)","createuseableitem#CreateUseableItem":"Framework.CreateUseableItem(name, cb)\n\nname: string\ncb: function(source)\n\n\nFramework.CreateUseableItem('itemname', function(source)\n-- Item Is Useable\nend)","getplayer#GetPlayer":"Framework.GetPlayer(source)\n\nsource: number\n\nreturns: Player\nFramework.GetPlayer(source)","doesjobexist#DoesJobExist":"Framework.DoesJobExist(job, grade)\n\njob: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesJobExist('jobname', 0)","doesgangexist#DoesGangExist":"Framework.DoesGangExist(gang, grade)\n\ngang: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesGangExist('gangname', 0)","notify#Notify":"Show Notification Message\nFramework.Notify(source, message, type, length)\n\nsource number\nmessage: string\ntype info | success | error\nlength number\n\n\nFramework.Notify(source, 'My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead(source)\n\nsource number\n\nreturns: boolean"}},"/bridge/installation":{"title":"Installation","data":{"":"","installing-the-bridge#Installing The Bridge":"For Developers Only\nTo be able to load the bridge you need to add the following to your fxmanifest.lua\nlua54 'yes'\n\nclient_scripts {\n'bridge/bridge.lua',\n-- client script\n}\n\nserver_scripts {\n'bridge/bridge.lua',\n-- server script\n}\n\nfiles {\n'bridge/**/**/client.lua',\n'bridge/**/*.lua',\n}"}},"/bridge/inventory/client":{"title":"Inventory Client","data":{"":"","openstash#OpenStash":"Opens an stash\nFramework.OpenStash(name, slots, weight, owner, groups)\n\nname: string\nslots: number\nweight: number\nowner?: string | boolean\ngroups?: table\n\nOpen stash without owner or groups\nFramework.OpenStash('mystash', 10, 5000)\nOpen stash unique to each player\nFramework.OpenStash('mystash', 10, 5000, true)\nOpen stash with player as the owner\nFramework.OpenStash('mystash', 10, 5000, Framework.Player.Identifier)\nOpen stash with groups\nFramework.OpenStash('mystash', 10, 5000, nil, { ['police'] = 0, ['ambulance'] = 0 })\n\nFramework.OpenStash('mystash', 10, 5000, nil, { ['mygang'] = 0 })","hasitem#HasItem":"Check if a player has an item or items\nFramework.HasItem(items, count, metadata)\n\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanChecking a single item\nFramework.HasItem('water_bottle', 1)\nChecking a single item with metadata\nFramework.HasItem('water_bottle', 1, { quality = 100 })\nChecking multiple items\nFramework.HasItem({'water_bottle', 'burger' }, 1)\nChecking multiple items with different quantity\nFramework.HasItem({['water_bottle'] = 1, ['burger'] = 2})"}},"/bridge/inventory/item":{"title":"Inventory Item","data":{"":"name string\nlabel string\nweight number\nslot number\ncount number\ntype string\nmetadata table\nimage string\ndescription string\nstack boolean\nclose boolean"}},"/bridge/inventory/server":{"title":"Inventory Server","data":{"":"","items#Items":"Framework.Items\nreturns: Item[]","additem#AddItem":"Add Item To Inventory\nFramework.AddItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanAdd item to inventory\n-- To Player\nFramework.AddItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- To Stash\nFramework.AddItem('mystash', 'water_bottle', 1, { quality = 100 })","removeitem#RemoveItem":"Remove Item From Inventory\nFramework.RemoveItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanRemove item from inventory\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1)\nRemove item from inventory where metadata matches\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, { quality = 50 })\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, { quality = 50 })\nRemove item from inventory from specific slot\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, nil, 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, nil, 1)","hasitem#HasItem":"Check if a player or a stash has an item\nFramework.HasItem(inventory, items, count, metadata)\n\ninventory: number | string\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanCheck if inventory has item\n-- Player\nFramework.HasItem(source, 'water_bottle', 1)\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1)\nCheck if inventory has item with metadata\n-- Player\nFramework.HasItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1, { quality = 100 })\nCheck if inventory has multiple items\n-- Player\nFramework.HasItem(source, {'water_bottle', 'burger' }, 1)\n\n-- Stash\nFramework.HasItem('mystash', {'water_bottle', 'burger' }, 1)\nCheck if inventory has multiple with different quantity\n-- Player\nFramework.HasItem(source, {['water_bottle'] = 1, ['burger'] = 2})\n\n-- Stash\nFramework.HasItem('mystash', {['water_bottle'] = 1, ['burger'] = 2})","getitemmetadata#GetItemMetadata":"Get Item Metadata\nFramework.GetItemMetadata(inventory, slot)\n\ninventory: number | string\nslot: number\n\nreturns: table\n-- Player\nFramework.GetItemMetadata(source, 1)\n\n-- Stash\nFramework.GetItemMetadata('mystash', 1)","setitemmetadata#SetItemMetadata":"Set Item Metadata\nFramework.SetItemMetadata(inventory, slot, metadata)\n\ninventory: number | string\nslot: number\nmetadata: table\n\n\n-- Player\nFramework.SetItemMetadata(source, 1, { quality = 100 })\n\n-- Stash\nFramework.SetItemMetadata('mystash', 1, { quality = 100 })","getinventory#GetInventory":"Returns Inventory\nFramework.GetInventory(inventory)\n\ninventory: number | string\n\nreturns: Item[]\n-- Player\nFramework.GetInventory(source)\n\n-- Stash\nFramework.GetInventory('mystash')"}},"/bridge/target":{"title":"Target","data":{"":"","disabletarget#DisableTarget":"Disables target\nTarget.DisableTarget(state)\n\nstate : boolean","addglobalobject#AddGlobalObject":"Create Global Object Target\nTarget.AddGlobalObject(options)\n\noptions : Options[]","removeglobalobject#RemoveGlobalObject":"Remove Global Object Target\nTarget.RemoveGlobalObject(labels)\n\nlabels : string | string[]","addglobalped#AddGlobalPed":"Create Global Ped Target\nTarget.AddGlobalPed(options)\n\noptions : Options[]","removeglobalped#RemoveGlobalPed":"Remove Global Ped Target\nTarget.RemoveGlobalPed(labels)\n\nlabels : string | string[]","addglobalplayer#AddGlobalPlayer":"Create Global Player Target\nTarget.AddGlobalPlayer(options)\n\noptions : Options[]","removeglobalplayer#RemoveGlobalPlayer":"Remove Global Player Target\nTarget.RemoveGlobalPlayer(labels)\n\nlabels : string | string[]","addglobalvehicle#AddGlobalVehicle":"Create Global Vehicle Target\nTarget.AddGlobalVehicle(options)\n\noptions : Options[]","removeglobalvehicle#RemoveGlobalVehicle":"Remove Global Vehicle Target\nTarget.RemoveGlobalVehicle(labels)\n\nlabels : string | string[]","addmodel#AddModel":"Create Model Target\nTarget.AddModel(models, options)\n\nmodels : number | string | table<number | string>\noptions : Options[]","removemodel#RemoveModel":"Remove Model Target\nTarget.RemoveModel(models, labels)\n\nmodels : number | string | table<number | string>\nlabels : string | string[]","addentity#AddEntity":"Create Entity Target\nTarget.AddEntity(entities, options)\n\nentities : number | table\noptions : Options[]","removeentity#RemoveEntity":"Remove Entity Target\nTarget.RemoveEntity(entities, labels)\n\nentities : number | table\nlabels : string | string[]","addbone#AddBone":"Create Bone Target\nTarget.AddBone(bones, options)\n\nbones : string | table\noptions : Options[]","removebone#RemoveBone":"Remove Bone Target\nTarget.RemoveBone(bones, labels)\n\nbones : string | table\nlabels : string | string[]","removezone#RemoveZone":"Removes a target zone\nTarget.RemoveZone(id)\n\nid : number | string"}},"/bridge/target/boxzone":{"title":"Target BoxZone","data":{"":"Creates Targetable BoxZone.\nTarget.AddBoxZone(data)\n\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nsize: vector3\nrotation: number\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddBoxZone({\nname = 'MyBoxZone',\ncoords = vector3(0, 0, 0),\nsize = vector3(1, 1, 1),\nrotation = 0,\ndebug = true,\noptions = {}\n})"}},"/bridge/target/options":{"title":"Target Options","data":{"":"label string\nicon? string\ndistance? number\njob? string | string[] | table<string, number>\ngang? string | string[] | table<string, number>\nitems? string | string[] | table<string, number>\ncanInteract function(entity?: number): boolean?\nonSelect? function(data: {entity: number})\nexport? string\nevent? string\nserverEvent? string\ncommand? string"}},"/bridge/target/polyzone":{"title":"Target PolyZone","data":{"":"Creates Targetable PolyZone.\nTarget.AddPolyZone(data)\n\ndata: table\ndebug?: boolean\nname: string\nheight?: number\npoints: vector3[]\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddPolyZone({\nname = 'MyPolyZone',\npoints = {\nvector3(0, 0, 0),\nvector3(0, 0, 0),\nvector3(0, 0, 0),\nvector3(0, 0, 0)\n},\nheight = 1,\ndebug = true,\noptions = {}\n})"}},"/bridge/target/spherezone":{"title":"Target SphereZone","data":{"":"Creates Targetable SphereZone.\nTarget.AddSphereZone(data)\n\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nradius: number\noptions: Options[]\n\n\n\nreturns: number | string\nTarget.AddSphereZone({\nname = 'MySphereZone',\ncoords = vector3(0, 0, 0),\nradius = 1,\ndebug = true,\noptions = {}\n})"}},"/bridge/utilities/client":{"title":"Framework Utilities","data":{"":"","loadmodel#LoadModel":"Load a model when called from a thread it will yield until loaded\nFramework.LoadModel(model)\n\nmodel: number | string","loadanimdict#LoadAnimDict":"Load a animation dictionary when called from a thread it will yield until loaded\nFramework.LoadAnimDict(animDict)\n\nanimDict: string","loadanimset#LoadAnimSet":"Load a animation clipset when called from a thread it will yield until loaded\nFramework.LoadAnimSet(animSet)\n\nanimSet: string"}},"/bridge/utilities/server":{"title":"Server","data":{"":""}},"/bridge/zone/boxzone":{"title":"Zone BoxZone","data":{"":"Creates BoxZone\nZone.BoxZone(data)\n\ndata: table\ndebug?: boolean\ncoords: vector3\nsize?: vector3\nDefault: vector3(4, 4, 4)\n\n\nrotation?: number\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/bridge/zone/czone":{"title":"Zone CZone","data":{"":"","id#id":"Zone Idreturns: number\nlocal zone = Zone.PolyZone({ ... })\n\nzone.id","coords#coords":"Zone Coordsreturns: vector3\nlocal zone = Zone.PolyZone({ ... })\n\nzone.coords()","distance#distance":"Zone Distancereturns: number\nlocal zone = Zone.PolyZone({ ... })\n\n-- Updates depending on player position\nzone.distance()","remove#remove":"Remove the zone\nlocal zone = Zone.PolyZone({ ... })\n\nzone.remove()","contains#contains":"Check if a vector3 is inside the zonereturns: boolean\nlocal zone = Zone.PolyZone({ ... })\n\nzone.contains(vector3(0, 0, 0))","onenter#onEnter":"Called when the player enters the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\nonEnter = function(data)\nprint('Player Just Entered Zone' .. data.id)\nend\n})","onexit#onExit":"Called when the player leaves the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\nonExit = function(data)\nprint('Player Just Left Zone ' .. data.id)\nend\n})","inside#inside":"Called as long as the player is inside the zone\nZone.PolyZone({\npoints = {\nvec(413.8, -1026.1, 29),\nvec(411.6, -1023.1, 29),\nvec(412.2, -1018.0, 29),\nvec(417.2, -1016.3, 29),\nvec(422.3, -1020.0, 29),\nvec(426.8, -1015.9, 29),\nvec(431.8, -1013.0, 29),\nvec(437.3, -1018.4, 29),\nvec(432.4, -1027.2, 29),\nvec(424.7, -1023.5, 29),\nvec(420.0, -1030.2, 29),\nvec(409.8, -1028.4, 29),\n},\nheight = 2,\ndebug = true,\ninside = function(data)\nprint('Player Is Inside Zone ' .. data.id)\nend\n})"}},"/bridge/zone/polyzone":{"title":"Zone PolyZone","data":{"":"Creates PolyZone\nZone.PolyZone(data)\n\ndata: table\ndebug?: boolean\nheight?: number\nDefault: 4\n\n\npoints: vector3[]\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/bridge/zone/spherezone":{"title":"Zone SphereZone","data":{"":"Creates SphereZone.\nZone.SphereZone(data)\n\ndata: table\ndebug?: boolean\ncoords: vector3\nradius?: number\nDefault: 2\n\n\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\n\n\n\nreturns: CZone"}},"/free/sd-menu":{"title":"SD-Menu","data":{"":""}},"/free/sd-menu/config":{"title":"Config","data":{"":""}},"/free/sd-menu/input":{"title":"Input","data":{"":""}},"/free/sd-menu/menu":{"title":"Menu","data":{"":""}},"/free/sd-paycheck":{"title":"SD-Paycheck","data":{"":"Simple Resource to add Paycheck System to your Server without all the hassle.","features#Features":"Use Ped Or BoxZone\nPay Paycheck In Cash Or Bank\nSet Paycheck Collection to a specific day of the week","install#Install":"To intercept the framework paycheck system we have to make the following changes:\n\n\nOpen qb-core/server/functions.lua\nSearch for PaycheckInterval()\nReplace the highlighted Player.Functions.AddMoney('bank', payment, 'paycheck'){:lua}\nReplace with TriggerEvent('sd-paycheck:server:AddPaycheck', payment, Player.PlayerData.source){:lua}\n\n\nfunction PaycheckInterval()\nif next(QBCore.Players) then\nfor _, Player in pairs(QBCore.Players) do\nif Player then\nlocal payment = QBShared.Jobs[Player.PlayerData.job.name]['grades'][tostring(Player.PlayerData.job.grade.level)].payment\nif not payment then payment = Player.PlayerData.job.payment end\nif Player.PlayerData.job and payment > 0 and (QBShared.Jobs[Player.PlayerData.job.name].offDutyPay or Player.PlayerData.job.onduty) then\nif QBCore.Config.Money.PayCheckSociety then\nlocal account = exports['qb-management']:GetAccount(Player.PlayerData.job.name)\nif account ~= 0 then -- Checks if player is employed by a society\nif account < payment then -- Checks if company has enough money to pay society\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('error.company_too_poor'), 'error')\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nexports['qb-management']:RemoveMoney(Player.PlayerData.job.name, payment)\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nelse\nPlayer.Functions.AddMoney('bank', payment, 'paycheck')\nTriggerClientEvent('QBCore:Notify', Player.PlayerData.source, Lang:t('info.received_paycheck', {value = payment}))\nend\nend\nend\nend\nend\nSetTimeout(QBCore.Config.Money.PayCheckTimeOut * (60 * 1000), PaycheckInterval)\nend\n\n\n\nOpen es_extended/server/paycheck.lua\nSearch for StartPayCheck()\nReplace the highlighted xPlayer.addAccountMoney('bank', salary, \"Paycheck\"){:lua} and xPlayer.addAccountMoney('bank', salary, \"Welfare Check\"){:lua}\nReplace with TriggerEvent('sd-paycheck:server:AddPaycheck', salary, xPlayer.source){:lua}\n\n\nfunction StartPayCheck()\nCreateThread(function()\nwhile true do\nWait(Config.PaycheckInterval)\nfor player, xPlayer in pairs(ESX.Players) do\nlocal jobLabel = xPlayer.job.label\nlocal job = xPlayer.job.grade_name\nlocal salary = xPlayer.job.grade_salary\n\nif salary > 0 then\nif job == 'unemployed' then -- unemployed\nxPlayer.addAccountMoney('bank', salary, \"Welfare Check\")\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_help', salary),\n'CHAR_BANK_MAZE', 9)\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - Unemployment Benefits\", \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nelseif Config.EnableSocietyPayouts then -- possibly a society\nTriggerEvent('esx_society:getSociety', xPlayer.job.name, function(society)\nif society ~= nil then              -- verified society\nTriggerEvent('esx_addonaccount:getSharedAccount', society.account, function(account)\nif account.money >= salary then -- does the society money to pay its employees?\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\naccount.removeMoney(salary)\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - \" .. jobLabel, \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\n\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'),\nTranslateCap('received_salary', salary), 'CHAR_BANK_MAZE', 9)\nelse\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), '', TranslateCap('company_nomoney'), 'CHAR_BANK_MAZE', 1)\nend\nend)\nelse -- not a society\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - \" .. jobLabel, \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_salary', salary),\n'CHAR_BANK_MAZE', 9)\nend\nend)\nelse -- generic job\nxPlayer.addAccountMoney('bank', salary, \"Paycheck\")\nif Config.LogPaycheck then\nESX.DiscordLogFields(\"Paycheck\", \"Paycheck - Generic\", \"green\", {\n{ name = \"Player\", value = xPlayer.name,   inline = true },\n{ name = \"ID\",     value = xPlayer.source, inline = true },\n{ name = \"Amount\", value = salary,         inline = true }\n})\nend\nTriggerClientEvent('esx:showAdvancedNotification', player, TranslateCap('bank'), TranslateCap('received_paycheck'), TranslateCap('received_salary', salary),\n'CHAR_BANK_MAZE', 9)\nend\nend\nend\nend\nend)\nend","config#Config":"Config = {}\nConfig.Debug = false\nConfig.Target = 'qb-target' -- qb-target / qtarget\n\n-- Pay Paycheck in Cash other wise deposited to bank\nConfig.CashOut = false\n\n-- Collect Paycheck on a specific Day\n-- -1 = Disabled\n--  0 = Sunday\n--  1 = Monday\n--  2 = Tuesday\n--  3 = Wednesday\n--  4 = Thursday\n--  5 = Friday\n--  6 = Saturday\nConfig.PayCheckDay = -1\n\n-- Using Ped\nConfig.UsePed = true\nConfig.Ped = 'ig_lifeinvad_02'\nConfig.PedCoords = vector4(-1078.77, -244.78, 36.76, 163.08)\n\n-- Using BoxZone\nConfig.BoxZone = vector3(-1082.73, -246.56, 37.76)\nConfig.BoxZoneLength = 5\nConfig.BoxZoneWidth = 2\nConfig.BoxZoneHeading = 300\nConfig.BoxZoneMaxZ = 36.76\nConfig.BoxZoneMinZ = 38.76"}},"/free/sd-stashes":{"title":"Index","data":{"":""}},"/":{"title":"About Sloppy Designs","data":{"":"With 16 Years In Developing ExperienceWe hope to provide high-quality products and services to the FiveM community. We pride ourselves in the quality of all our products and we continue to strive to always provide the highest quality product and support while meeting our customer's expectations and never rush a product out that we are not 100% satisfied with ourselves."}},"/sd-merchants":{"title":"Sd Merchants","data":{"":"SD-Merchants"}},"/sd-notify":{"title":"Sd Notify","data":{"":"Notify"}}}
{"/_app":{"title":" App","data":{"":""}},"/bridge":{"title":"Bridge","data":{"":"","currently-supported#Currently Supported":"ESX\tQBCore\tQBox\tvRP\tNDCore\tDatabase\t\t\t\t\t\toxmysql\t\t\tInventory\t\t\t\t\t\tqb-inventory\t\t\tlj-inventory\t\t\taj-inventory\t\t\tax-inventory\t\t\tps-inventory\t\t\tox-inventory\t\t\tqs-inventory\t\t\tTarget\t\t\t\t\t\tox_target\t\t\tqb-target\t\t\tqtarget\t\t\tZone\t\t\t\t\t\tox_lib\t\t\tPolyZone","bridge-settings-optional#Bridge Settings (Optional)":"The bridge auto detects all components incase you use a renamed database/framework/inventory/target/zone you can change the names using the following convars\n-- Turn On Debug Mode\nsetr bridge:debug \"true\"\n\n-- Override Database\nsetr bridge:database \"oxmysql\"\n\n-- Override Database Resource Name (Used For Export)\nsetr bridge:databasename \"oxmysql\"\n\n-- Override Framework\nsetr bridge:framework \"esx\"\n\n-- Override Framework Resource Name (Used For Export)\nsetr bridge:frameworkname \"es_extended\"\n\n-- Override Framework Resource Name (Used For Event)\nsetr bridge:frameworkevent \"esx:getSharedObject\"\n\n-- Override Inventory\nsetr bridge:inventory \"ox_inventory\"\n\n-- Override Inventory Resource Name (Used For Export)\nsetr bridge:inventoryname \"ox_inventory\"\n\n-- Override Target\nsetr bridge:target \"ox_target\"\n\n-- Override Target Name (Used For Export)\nsetr bridge:targetname \"ox_target\"\n\n-- Override Zone\nsetr bridge:zone \"ox_lib\"\n\n-- Override Zone Name (Used For Export)\nsetr bridge:zonename \"ox_lib\""}},"/bridge/database/insert":{"title":"Insert","data":{"":"Insert new row into table\nDatabase.insert(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal id = Database.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' })\n\nprint(id)\n\n\n\nDatabase.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' }, function(id)\nprint(id)\nend)"}},"/bridge/database/prepare":{"title":"Prepare","data":{"":"Prepare query for optimizing performance and frequently called queries\nDatabase.prepare(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/query":{"title":"Query","data":{"":"Returns all\nDatabase.query(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal result = Database.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' })\n\nprint(json.encode(result))\n\n\n\nDatabase.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\nprint(json.encode(result))\nend)"}},"/bridge/database/scalar":{"title":"Scalar","data":{"":"Returns the first column for a single row\nDatabase.scalar(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: any\n\n\nlocal column1 = Database.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(column1)\n\n\n\nDatabase.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(columm1)\nprint(column1)\nend)"}},"/bridge/database/single":{"title":"Single","data":{"":"Returns all selected columns for a single row\nDatabase.single(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: table\n\n\nlocal result = Database.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\n\nprint(result.column1, result.column2)\n\n\n\nDatabase.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(result)\nprint(result.column1, result.column2)\nend)"}},"/bridge/database/transaction":{"title":"Transaction","data":{"":"Transaction executes multiple queries and commits them only if all succeed\nDatabase.transaction(query, data, cb)\n\nquery: table\ncb?: function(result)\n\nreturns: boolean\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nlocal result = Database.transaction(queries)\n\nprint(result)\n\n\n\nlocal queries = {\n{ 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n{ 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\n\nDatabase.transaction(queries, function(result)\nprint(result)\nend)"}},"/bridge/database/update":{"title":"Update","data":{"":"Returns the number of rows affected by the query\nDatabase.update(query, data, cb)\n\nquery: string\ndata?: table\ncb?: function(result)\n\nreturns: number\n\n\nlocal result = Database.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' })\n\nprint(result)\n\n\n\nDatabase.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' }, function(result)\nprint(result)\nend)"}},"/bridge/framework/client":{"title":"Framework Client","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n-- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n-- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n-- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n-- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n-- Player Gang Changed\nend","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function()\n-- Player Data Changed\nend","player#Player":"Framework.Player\nreturns: Player\nlocal player = Framework.Player\nprint(player.Firstname, player.Lastname)","triggercallback#TriggerCallback":"Function Triggers Server Callback\nFramework.TriggerCallback(name, cb, ...)\n\nname: string\ncb: function(...)\n\n\nFramework.TriggerCallback('servercallbackname', function(result1, result2)\nprint(result1, result2)\nend, value1, value2)","spawnvehicle#SpawnVehicle":"Function Spawns Vehicle\nFramework.SpawnVehicle(cb, model, coords, warp)\n\ncb: function(netid)\nmodel number | string\ncoords? vector3 | vector4\nwarp? boolean\n\n\nFramework.SpawnVehicle(function(netid)\nlocal vehicle = NetToVeh(netid)\nSetVehicleNumberPlateText(vehicle, 'MYPLATE')\nend, 'dominator')","toggleduty#ToggleDuty":"Toggle Job Duty\nFramework.ToggleDuty()","notify#Notify":"Framework.Notify()"}},"/bridge/framework/player":{"title":"Framework Player","data":{"":"","source#source":"Player sourcereturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nprint(player.source)","identifier#Identifier":"Player identifierreturns: string\n\n\nFramework.Player.Identifier\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Identifier","name#Name":"Player namereturns: string\n\n\nFramework.Player.Name\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Name","firstname#Firstname":"Player firstnamereturns: string\n\n\nFramework.Player.Firstname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Firstname","lastname#Lastname":"Player lastnamereturns: string\n\n\nFramework.Player.Lastname\n\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.Lastname","job#Job":"Player jobreturns: table\nName: string\nLabel: string\nDuty: boolean\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nFramework.Player.Job.Name\n-- returns: police\n\nFramework.Player.Job.Label\n-- returns: Law Enforcement\n\nFramework.Player.Job.Duty\n-- returns: false\n\nFramework.Player.Job.Boss\n-- returns: false\n\nFramework.Player.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nFramework.Player.Job.Grade.Name\n-- returns: Officer\n\nFramework.Player.Job.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\n\nplayer.Job.Name\n-- returns: police\n\nplayer.Job.Label\n-- returns: Law Enforcement\n\nplayer.Job.Duty\n-- returns: false\n\nplayer.Job.Boss\n-- returns: false\n\nplayer.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\n\nplayer.Job.Grade.Name\n-- returns: Officer\n\nplayer.Job.Grade.Level\n-- returns: 1","gang#Gang":"Player gangreturns: table\nName: string\nLabel: string\nBoss: boolean\nGrade: table\nName: string\nLevel: number\n\n\n\n\n\n\nFramework.Player.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nFramework.Player.Gang.Name\n-- returns: mygang\n\nFramework.Player.Gang.Label\n-- returns: My Gang Name\n\nFramework.Player.Gang.Boss\n-- returns: false\n\nFramework.Player.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nFramework.Player.Gang.Grade.Name\n-- returns: Enforcer\n\nFramework.Player.Gang.Grade.Level\n-- returns: 1\n\n\n\nlocal player = Framework.GetPlayer(source)\n\nplayer.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\n\nplayer.Gang.Name\n-- returns: mygang\n\nplayer.Gang.Label\n-- returns: My Gang Name\n\nplayer.Gang.Boss\n-- returns: false\n\nplayer.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\n\nplayer.Gang.Grade.Name\n-- returns: Enforcer\n\nplayer.Gang.Grade.Level\n-- returns: 1","set-job#Set Job":"Set Player job\nPlayer.SetJob(job, grade)\n\njob: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetJob('police', 0)","set-gang#Set Gang":"Set Player gang\nPlayer.SetGang(gang, grade)\n\ngang: string\ngrade number | string\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.SetGang('mygang', 0)","hasjob#HasJob":"Check if player has job and or grade\nFramework.HasJob(job, player)\n\njob: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasJob('police', Framework.Player)\n\nFramework.HasJob({ ['police'] = 1 }, Framework.Player)","hasgang#HasGang":"Check if player has gang and or grade\nFramework.HasGang(gang, player)\n\ngang: string | table\nplayer: Player\n\nreturns: boolean\nFramework.HasGang('mygang', Framework.Player)\n\nFramework.HasGang({ ['mygang'] = 1 }, Framework.Player)","add-money#Add Money":"Add Player Money\nPlayer.AddMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.AddMoney('cash', 100)","remove-money#Remove Money":"Remove Player Money\nPlayer.RemoveMoney(type, amount)\n\ntype: cash | bank | other\namount number\n\nreturns: boolean\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveMoney('cash', 100)","get-money#Get Money":"Get Player Money\nPlayer.GetMoney(type)\n\ntype: cash | bank | other\n\nreturns: number\n\n\nlocal player = Framework.GetPlayer(source)\nplayer.GetMoney('cash')"}},"/bridge/framework/server":{"title":"Framework Server","data":{"":"","onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n-- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n-- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n-- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n-- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n-- Player Gang Changed\nend","onplayerdataupdate#OnPlayerDataUpdate":"Function gets called when the players data updates\nFramework.OnPlayerDataUpdate = function()\n-- Player Data Changed\nend","createcallback#CreateCallback":"Function Creates Server Callback.\nFramework.CreateCallback(name, cb)\n\nname: string\ncb: function(source cb, ...)\n\n\nFramework.CreateCallback('servercallbackname', function(source, cb, value1, value2)\ncb(value1, value2)\nend)","createuseableitem#CreateUseableItem":"Framework.CreateUseableItem(name, cb)\n\nname: string\ncb: function(source)\n\n\nFramework.CreateUseableItem('itemname', function(source)\n-- Item Is Useable\nend)","getplayer#GetPlayer":"Framework.GetPlayer(source)\n\nsource: number\n\nreturns: Player\nFramework.GetPlayer(source)","doesjobexist#DoesJobExist":"Framework.DoesJobExist(job, grade)\n\njob: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesJobExist('jobname', 0)","doesgangexist#DoesGangExist":"Framework.DoesGangExist(gang, grade)\n\ngang: string\ngrade: string | number\n\nreturns: boolean\nFramework.DoesGangExist('gangname', 0)","notify#Notify":"Framework.Notify()"}},"/bridge/installation":{"title":"Installation","data":{"":"","installing-the-bridge#Installing The Bridge":"For Developers Only\nTo be able to load the bridge you need to add the following to your fxmanifest.lua\nlua54 'yes'\n\nclient_scripts {\n'bridge/bridge.lua',\n-- client script\n}\n\nserver_scripts {\n'bridge/bridge.lua',\n-- server script\n}\n\nfiles {\n'bridge/**/**/client.lua',\n'bridge/**/*.lua',\n}"}},"/bridge/inventory/client":{"title":"Inventory Client","data":{"":"","openstash#OpenStash":"Opens an stash\nFramework.OpenStash(name, slots, weight, owner, groups)\n\nname: string\nslots: number\nweight: number\nowner?: string | boolean\ngroups?: table\n\nOpen stash without owner or groups\nFramework.OpenStash('mystash', 10, 5000)\nOpen stash unique to each player\nFramework.OpenStash('mystash', 10, 5000, true)\nOpen stash with player as the owner\nFramework.OpenStash('mystash', 10, 5000, Framework.Player.Identifier)\nOpen stash with groups\nFramework.OpenStash('mystash', 10, 5000, nil, { ['police'] = 0, ['ambulance'] = 0 })\n\nFramework.OpenStash('mystash', 10, 5000, nil, { ['mygang'] = 0 })","hasitem#HasItem":"Check if a player has an item or items\nFramework.HasItem(items, count, metadata)\n\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanChecking a single item\nFramework.HasItem('water_bottle', 1)\nChecking a single item with metadata\nFramework.HasItem('water_bottle', 1, { quality = 100 })\nChecking multiple items\nFramework.HasItem({'water_bottle', 'burger' }, 1)\nChecking multiple items with different quantity\nFramework.HasItem({['water_bottle'] = 1, ['burger'] = 2})"}},"/bridge/inventory/item":{"title":"Inventory Item","data":{"":"name string\nlabel string\nweight number\nslot number\ncount number\ntype string\nmetadata table\nimage string\ndescription string\nstack boolean\nclose boolean"}},"/bridge/inventory/server":{"title":"Inventory Server","data":{"":"","items#Items":"Framework.Items\nreturns: Item[]","additem#AddItem":"Add Item To Inventory\nFramework.AddItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanAdd item to inventory\n-- To Player\nFramework.AddItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- To Stash\nFramework.AddItem('mystash', 'water_bottle', 1, { quality = 100 })","removeitem#RemoveItem":"Remove Item From Inventory\nFramework.RemoveItem(inventory, item, count, metadata, slot)\n\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\n\nreturns: booleanRemove item from inventory\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1)\nRemove item from inventory where metadata matches\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, { quality = 50 })\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, { quality = 50 })\nRemove item from inventory from specific slot\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, nil, 1)\n\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, nil, 1)","hasitem#HasItem":"Check if a player or a stash has an item\nFramework.HasItem(inventory, items, count, metadata)\n\ninventory: number | string\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\n\nreturns: booleanCheck if inventory has item\n-- Player\nFramework.HasItem(source, 'water_bottle', 1)\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1)\nCheck if inventory has item with metadata\n-- Player\nFramework.HasItem(source, 'water_bottle', 1, { quality = 100 })\n\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1, { quality = 100 })\nCheck if inventory has multiple items\n-- Player\nFramework.HasItem(source, {'water_bottle', 'burger' }, 1)\n\n-- Stash\nFramework.HasItem('mystash', {'water_bottle', 'burger' }, 1)\nCheck if inventory has multiple with different quantity\n-- Player\nFramework.HasItem(source, {['water_bottle'] = 1, ['burger'] = 2})\n\n-- Stash\nFramework.HasItem('mystash', {['water_bottle'] = 1, ['burger'] = 2})","getitemmetadata#GetItemMetadata":"Get Item Metadata\nFramework.GetItemMetadata(inventory, slot)\n\ninventory: number | string\nslot: number\n\nreturns: table\n-- Player\nFramework.GetItemMetadata(source, 1)\n\n-- Stash\nFramework.GetItemMetadata('mystash', 1)","setitemmetadata#SetItemMetadata":"Set Item Metadata\nFramework.SetItemMetadata(inventory, slot, metadata)\n\ninventory: number | string\nslot: number\nmetadata: table\n\n\n-- Player\nFramework.SetItemMetadata(source, 1, { quality = 100 })\n\n-- Stash\nFramework.SetItemMetadata('mystash', 1, { quality = 100 })","getinventory#GetInventory":"Returns Inventory\nFramework.GetInventory(inventory)\n\ninventory: number | string\n\nreturns: Item[]\n-- Player\nFramework.GetInventory(source)\n\n-- Stash\nFramework.GetInventory('mystash')"}},"/free/sd-menu":{"title":"SD-Menu","data":{"":""}},"/free/sd-menu/config":{"title":"Config","data":{"":""}},"/free/sd-menu/input":{"title":"Input","data":{"":""}},"/free/sd-menu/menu":{"title":"Menu","data":{"":""}},"/free/sd-paycheck":{"title":"Index","data":{"":""}},"/free/sd-stashes":{"title":"Index","data":{"":""}},"/":{"title":"About Sloppy Designs","data":{"":"With 16 Years In Developing ExperienceWe hope to provide high-quality products and services to the FiveM community. We pride ourselves in the quality of all our products and we continue to strive to always provide the highest quality product and support while meeting our customer's expectations and never rush a product out that we are not 100% satisfied with ourselves."}},"/sd-merchants":{"title":"Sd Merchants","data":{"":"SD-Merchants"}},"/sd-notify":{"title":"Sd Notify","data":{"":"Notify"}}}